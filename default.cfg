# Default options of FPTaylor
# Any line which starts with * or # is a comment line

#**************************
# Basic options
#**************************

# If true, then additional debug information is printed
debug = true

# Specifies the verbosity level of the output
verbosity = 1

# If true, then absolute round-off error is computed
abs-error = true

# If true, then relative round-off error is computed
rel-error = false

# If true, then bounds of the analyzed expressions are computed.
# These bounds are always computed if rel-error = true
find-bounds = true

# If true, then uncertainty specifications for input variables are used
uncertainty = false

# If true, all potential overflows and invalid operations throw an exception
fail-on-exception = true

# If true, then expressions are simplified before optimization
# Maxima must be installed if simplification = true
simplification = false

# If true, then a more accurate rounding model is used.
# This model introduces discontinuous functions in optimization problems.
fp-power2-model = false

# If true, then round-off errors in real variables are
# constants which depend on bounds of variables
const-approx-real-vars = true

# If true, then some second order error term expressions are
# estimated with a selected optimization procedure.
# This mode is slower but can yield more accurate results.
intermediate-opt = false

# If true, then rounding of equivalent expression will
# produce different indices (i.e., no error cancellation effect).
# May be useful to measure the error cancellation effect.
unique-indices = false

# If true then a proof certificate is created and saved
proof-record = false

#**************************
# Optimization options
#**************************

# Optimization method:
#   bb (basic interval branch and bound)
#   z3 (z3 SMT solver with binary search)
#   nlopt (nlopt optimization library)
#   gelpia (GELPIA tool)
opt = bb

# If true, then an approximate optimization problem is solved
opt-approx = true

# If true, a complete optimization problem is solved
# (in general, it is harder than an approximate optimization problem
#  but may yield a better result)
opt-exact = true

# Optimization tolerance
opt-tol = 0.01

#**************************
# z3 options
#**************************

z3-timeout = 1000

#**************************
# bb options
#**************************

#bb-ocamlc = ocamlc
bb-ocamlc = ocamlopt

# bb algorithm (possible values: opt0)
bb-alg = opt0

# Maximum number of iterations (negative numbers = unlimited iterations)
bb-iter = 5000000

# Minimum width of boxes
bb-tolx = 0.01

#**************************
# Gelpia options
#**************************

# In order to use Gelpia, set the GELPIA_PATH
# environment variable or copy Gelpia to the FPTaylor 
# root directory

# The number of Gelpia threads
gelpia-threads = 2

# Gelpia solver
gelpia-solver = map_parallel

# Minimum width of boxes
gelpia-tolx = 0.01


#**************************
# nlopt options
#**************************

nlopt-cc = gcc -std=c99 -O3
nlopt-lib = -lnlopt -lm


#**************************
# Extra options
#**************************

develop = false