(* ========================================================================== *)
(* FIXED POINT DEFINITIONS                                                    *)
(* ========================================================================== *)

needs "common.hl";;

(* -------------------------------------------------------------------------- *)
(* Fixed point format                                                         *)
(* -------------------------------------------------------------------------- *)

(* Fix r:num > 1 and even, p:num > 0, and e:int. A fixed point number is a    *)
(* real number that can be written as                                         *)
(*                                                                            *)
(*     +/- f * r^(e - p + 1)                                                  *)
(*                                                                            *)
(* where                                                                      *)
(*                                                                            *)
(*   -- f:num                                                                 *)
(*   -- 0 <= f < r^(p - 1)                                                    *)

let is_valid_fformat = define
  `is_valid_fformat (r:num, p:num, e:int) = (1 < r /\ (EVEN r) /\ (0 < p))`;;

let fformat_typbij = new_type_definition
  "fformat"
  ("mk_fformat", "dest_fformat")
  (prove (`?(fmt:num#num). is_valid_fformat fmt`,
	  EXISTS_TAC `(2:num, 1:num, &0)` THEN
	    REWRITE_TAC[is_valid_fformat] THEN
	    ARITH_TAC));;
			 
let fr = define
  `fr (fmt:fformat) = (FST (dest_fformat fmt))`;;

let fp = define
  `fp (fmt:fformat) = (SND (dest_fformat fmt))`;;

let fe = define
  `fe (fmt:fformat) = (SND (dest_fformat fmt))`;;

let is_frac = define
  `is_frac (fmt:fformat) (x:real) (f:num) = 
  ((f < (fr fmt) EXP ((fp fmt) - 1) /\ 
      abs(x) = &f * &(fr fmt) ipow (&(fe fmt) - &(fp fmt) + &1)))`;;

let ff = define
  `ff (fmt:fformat) (x:real) = (@(f:num) . is_frac(fmt) x f)`;;

let is_fixed = define
  `is_fixed (fmt:fformat) (x:real) = (?(f:num) . is_frac(fmt) x f)`;;

(* -------------------------------------------------------------------------- *)
(* Helpful constants                                                          *)
(* -------------------------------------------------------------------------- *)

(* largest fraction                                                           *)
let fmax = define
  `fmax (fmt:fformat) = ((fr fmt) EXP ((fp fmt) - 1))`;;

(* fixed point ulp                                                            *)
let fulp = define
  `fulp (fmt:fformat) = (&(fr ffmt) ipow ((fe fmt) - &(fp fmt) + &1))`;;

(* fixed point infinity                                                       *)
let finf = define
  `finf (fmt:fformat) = (&(fr ffmt) ipow (fe fmt))`;;

(* largest fixed point magnitude = finf - fulp                                *)
let flargest = define
  `flargest (fmt:fformat) = ((finf fmt) - (fulp fmt))`;;

let fixed = define
  `fixed (fmt:fformat) = ({ x | is_fixed(fmt) x } UNION 
			    { finf(fmt), --finf(fmt) })`;;

(* -------------------------------------------------------------------------- *)
(* Greatest / least                                                           *)
(* -------------------------------------------------------------------------- *)

(* Simple wrappers around sup / inf                                           *)

let greatest = define 
  `greatest (fmt:fformat) (S:real->bool) = sup(S INTER fixed);;

let least = define 
  `least (fmt:fformat) (S:real->bool) = inf(S INTER fixed);;

(* -------------------------------------------------------------------------- *)
(* Fixed point rounding                                                       *)
(* -------------------------------------------------------------------------- *)

let closer = define
  `closer (x:real) (y:real) (z:real) = (abs(x - z) < abs(y - z))`;;

let roundmode_INDUCT, roundmode_RECURSION = define_type
  "roundmode = To_near | To_zero | To_pinf | To_ninf";;

let round = define
  `((round (fmt:fformat) (To_near) (x:real) =
	(let lo = (greatest(fmt) (\fp. fp <= x))
	 and hi = (least(fmt) (\fp. x <= fp))
	 in
	   (if (closer lo hi x)
	    then 
	      lo
	    else if (closer hi lo x)
	    then 
	      hi
	    else if (EVEN (ff(fmt) lo))
	    then
	      lo
	    else
	      hi))) /\
      
      (round (fmt:fformat) (To_zero) (x:real) =
	  (if (x > &0)
	   then (greatest(fmt) (\fp. fp <= x))
	   else (least(fmt) (\fp. x <= fp)))) /\

      (round (fmt:fformat) (To_pinf) (x:real) =
	  (least(fmt) (\fp. x <= fp))) /\

      (round (fmt:fformat) (To_ninf) (x:real) =
	  (greatest(fmt) (\fp. fp <= x))))`;;

