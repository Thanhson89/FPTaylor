needs "tests/utils.hl";;

let add_result, get_result, print_results =
  let results = ref [] in
  let add name th time = 
    let _ = results := !results @ [name, (th, time)] in th in
  let get name = assoc name !results in
  let print1 (name, (th, time)) =
    let tm = rand (rand (snd (strip_forall (concl th)))) in
      report (sprintf "%s (time = %f): %s" name time (string_of_term tm)) in
  let print () =
    let _ = map print1 !results in () in
    add, get, print;;

let pp = 10;;

let form_th, bound_th, time = validate pp "logexp.proof";;
add_result "logexp" (trans_bound bound_th `#1.615 * &10 ipow (-- &15)`) time;;

let form_th, bound_th, time = validate pp "sphere.proof";;
add_result "sphere" (trans_bound bound_th `#1.288 * &10 ipow (-- &14)`) time;;

use_rat_verifier := false;;

let form_th, bound_th, time = validate pp "azimuth.proof";;
add_result "azimuth" (trans_bound bound_th `#1.456 * &10 ipow (-- &14)`) time;;

use_rat_verifier := true;;

print_results();;
